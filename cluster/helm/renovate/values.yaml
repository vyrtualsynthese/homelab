image:
  # -- Registry to pull image from
  registry: ghcr.io
  # -- Image name to pull
  repository: renovatebot/renovate
  # -- Renovate image tag to pull
  tag: 37.275.0
  # -- "IfNotPresent" to pull the image if no image with the specified tag exists on the node, "Always" to always pull the image or "Never" to try and use pre-pulled images
  pullPolicy: IfNotPresent

# -- Secret to use to pull the image from the repository
imagePullSecrets: {}

renovate:
  # -- Custom exiting global renovate config
  existingConfigFile: ''
  # -- Inline global renovate config.json
  config: |
     {
     }
  # See https://docs.renovatebot.com/self-hosted-configuration
  # config: |
  #   {
  #     "platform": "gitlab",
  #     "endpoint": "https://gitlab.example.com/api/v4",
  #     "token": "your-gitlab-renovate-user-token",
  #     "autodiscover": "false",
  #     "dryRun": true,
  #     "printConfig": true,
  #     "repositories": ["username/repo", "orgname/repo"]
  #   }

  # -- Use the Helm tpl function on your configuration. See README for how to use this value
  configEnableHelmTpl: false

  # -- Use this to create the renovate-config as a secret instead of a configmap
  configIsSecret: false

# -- Specify resource limits and requests for the renovate container
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
#  memory: 128Mi

existingSecret: 'renovate'

# -- Override hostname resolution
hostAliases: []
# See: https://kubernetes.io/docs/tasks/network/customize-hosts-file-for-pods/
# hostAliases:
#   - ip: "your-ip"
#     hostnames:
#       - "your-hostname"

# -- Pod-level security-context
securityContext: {}

# -- Select the node using labels to specify where the cronjob pod should run on
nodeSelector: {}
# See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
# renovate: true

# -- Configure the pod(Anti)Affinity and/or node(Anti)Affinity
affinity:
  requiredDuringSchedulingIgnoredDuringExecution:
    nodeSelectorTerms:
      - matchExpressions:
          - key: node-type
            operator: In
            values:
              - general
