- hosts: backup
  remote_user: vronteix
  become: yes

  tasks:
    - name: install restic from apt
      apt:
        name: restic
        state: present

    - name: Update restic from sources
      ansible.builtin.command: sudo restic self-update

    - name: Import Restic passwords
      include_vars:
        file: restic_env.yaml
        name: restic_env

    - name: Set restic repo password as env variable
      ansible.builtin.lineinfile:
        path: /etc/environment
        state: present
        regexp: '^RESTIC_PASSWORD="{{ restic_env[inventory_hostname].password }}"'
        line: 'RESTIC_PASSWORD="{{ restic_env[inventory_hostname].password }}"'

    - name: Set restic access key as env variable
      ansible.builtin.lineinfile:
        path: /etc/environment
        state: present
        regexp: '^AWS_ACCESS_KEY_ID="{{ restic_env[inventory_hostname].awsAccessKey }}"'
        line: 'AWS_ACCESS_KEY_ID="{{ restic_env[inventory_hostname].awsAccessKey }}"'

    - name: Set restic secret key as env variable
      ansible.builtin.lineinfile:
        path: /etc/environment
        state: present
        regexp: '^AWS_SECRET_ACCESS_KEY="{{ restic_env[inventory_hostname].awsSecretKey }}"'
        line: 'AWS_SECRET_ACCESS_KEY="{{ restic_env[inventory_hostname].awsSecretKey }}"'

    - name: Set restic repo as env variable
      ansible.builtin.lineinfile:
        path: /etc/environment
        state: present
        regexp: '^RESTIC_REPOSITORY="s3:http://minio.api.kub.local/{{ inventory_hostname }}backup"'
        line: 'RESTIC_REPOSITORY="s3:http://minio.api.kub.local/{{ inventory_hostname }}backup"'

    - name: Check if repo already configured
      ansible.builtin.command: restic snapshots
      register: repoCheckReturn
      ignore_errors: yes

    - name: Setup restic repository Backup
      ansible.builtin.command: sudo restic init
      when: repoCheckReturn.rc != 0

    - name: Import backup script for nas
      ansible.builtin.copy:
        src: "scripts/backup-scripts/nas/backup.sh"
        dest: "/home/vronteix/scripts/"
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
        mode: '0550'
      when: inventory_hostname == "nas"

    - name: Import backup script for runners
      ansible.builtin.copy:
        src: "scripts/backup-scripts/runner/backup.sh"
        dest: "/home/vronteix/scripts/"
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
        mode: '0550'
      when: inventory_hostname == "rbp1" or inventory_hostname == "rbp0"

    - name: Create Cronjob for remote backup
      ansible.builtin.cron:
        name: "Slave remote backup"
        minute: "0"
        hour: "4"
        user: root
        job: "/home/{{ ansible_ssh_user }}/scripts/backup.sh"
